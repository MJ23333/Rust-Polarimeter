name: Build Windows Executable

on:
  push:
    branches: [ "main" ] # 当主分支有更新时触发
  workflow_dispatch: # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest # 使用最新的 Windows 环境
    strategy:
      matrix:
        rust: [stable]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # 检出你的代码

    


    # - name: Install OpenCV and LLVM
    #   run: choco install opencv -y; choco install llvm -y

    # - name: Set OpenCV Environment Variables from Choco
    #   run: |
    #       # 1. Find the necessary paths based on the OpenCV_DIR set by choco
    #       $opencv_include_path = Join-Path $env:OpenCV_DIR "build\include"
    #       # NOTE: The 'vc17' part might change with future Visual Studio versions on the runner
    #       $opencv_lib_path = Join-Path $env:OpenCV_DIR "build\x64\vc17\lib"
          
    #       # 2. Set the environment variables for subsequent steps
    #       echo "OPENCV_INCLUDE_PATHS=$opencv_include_path" >> $env:GITHUB_ENV
    #       echo "OPENCV_LINK_PATHS=$opencv_lib_path" >> $env:GITHUB_ENV
    #       # For a standard build, 'opencv_world' followed by the version number is typical
    #       echo "OPENCV_LINK_LIBS=opencv_world490" >> $env:GITHUB_ENV
          
    #       # 3. (Optional) Verify the paths
    #       Write-Host "Set OPENCV_INCLUDE_PATHS to: $opencv_include_path"
    #       Write-Host "Set OPENCV_LINK_PATHS to: $opencv_lib_path"
    #   shell: pwsh
    - uses: Dovyski/setup-opencv-action@v1.1
      with:
        opencv-version: '4.9.0'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    # 新增步骤: 安装 cargo-bundle
    - name: Install cargo-bundle
      run: cargo install cargo-bundle

    # 修改步骤: 使用 cargo bundle 而不是 cargo build
    - name: Bundle the release executable
      run: cargo bundle --release

    # 修改步骤: 上传打包好的产物
    - name: Upload Artifact (zip)
      uses: actions/upload-artifact@v4
      with:
        name: windows-bundle-zip
        # cargo bundle 会把所有东西放在 target/release/bundle/os-arch/你的程序名/ 目录下
        # 我们把它压缩并上传
        path: |
          target/release/bundle/windows-msvc/ # 这个路径可能会变化
          !target/release/bundle/**/*.pdb # 排除调试文件