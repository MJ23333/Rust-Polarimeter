name: Build Windows Executable

on:
  push:
    branches: [ "main" ] # 当主分支有更新时触发
  workflow_dispatch: # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest # 使用最新的 Windows 环境
    strategy:
      matrix:
        rust: [stable]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # 检出你的代码
    - name: Set up MSVC Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
    


    # - name: Install OpenCV and LLVM
    #   run: choco install opencv --version=4.11.0 -y; choco install llvm -y

    # - name: Discover and Set OpenCV Environment Variables
    #   id: set_opencv_vars
    #   run: |
    #       echo "OPENCV_INCLUDE_PATHS=C:\tools\opencv\build\include" >> $env:GITHUB_ENV

    #       $IncludePath = "C:\tools\opencv\build\include"
    #       echo "OPENCV_INCLUDE_PATHS=$IncludePath" >> $env:GITHUB_ENV
    #       Write-Output "OPENCV_INCLUDE_PATHS=$IncludePath"

    #       # Discover the lib path (robustly finds the vc* folder)
    #       $LibDir = (Get-ChildItem "C:\tools\opencv\build\x64" -Directory | Where-Object { $_.Name -like 'vc*' } | Select-Object -First 1)
    #       if (-not $LibDir) {
    #         Write-Error "Could not find the VC++ version-specific lib directory in $env:OpenCV_DIR\x64"
    #         exit 1
    #       }
    #       $LibPath = "$($LibDir.FullName)\lib"
    #       echo "OPENCV_LINK_PATHS=$LibPath" >> $env:GITHUB_ENV
    #       Write-Output "OPENCV_LINK_PATHS=$LibPath"
          
    #       # Discover all library names in that path
    #       $ReleaseLibNames = (Get-ChildItem $LibPath -Filter "*.lib" | Where-Object { $_.Name -notlike "*d.lib" }).Name -replace '\.lib$' -join ','
    #       if (-not $ReleaseLibNames) {
    #         Write-Error "Could not find any RELEASE .lib files (not ending with d.lib) in $LibPath"
    #         exit 1
    #       }
    #       echo "OPENCV_LINK_LIBS=$ReleaseLibNames" >> $env:GITHUB_ENV
    #       Write-Output "OPENCV_LINK_LIBS=$ReleaseLibNames"
         
    #   shell: pwsh
     
    # - name: Install Rust
    #   uses: dtolnay/rust-toolchain@stable
    #   with:
    #     toolchain: ${{ matrix.rust }}

    # # 新增步骤: 安装 cargo-bundle

    # # 修改步骤: 使用 cargo bundle 而不是 cargo build
    # - name: Bundle the release executable
    #   run: cargo build --release

    # # 修改步骤: 上传打包好的产物
    # - name: Upload Artifact (zip)
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: windows-executable
    #     path: target/release/rust_polarimeter_gui.exe
    - name: Create Distribution Package
      id: create_package
      run: |
        $PKG_DIR = "release_package"
        New-Item -ItemType Directory -Force -Path $PKG_DIR

        # Write-Output "Copying executable..."
        # Copy-Item -Path "target/release/rust_polarimeter_gui.exe" -Destination $PKG_DIR

        # ======================================================================
        # vvvvvvvvvvvvvv     模糊查找 DLL 的核心改进     vvvvvvvvvvvvvvvv
        # ======================================================================
        # Write-Output "Copying OpenCV DLLs using wildcards..."
        # $OpenCVBinDir = (Get-ChildItem "C:\tools\opencv\build\x64" -Directory | Where-Object { $_.Name -like 'vc*' } | Select-Object -First 1).FullName + "\bin"

        # $ReleaseDll = Get-ChildItem -Path $OpenCVBinDir -Filter "opencv_world*.dll" | Where-Object { $_.Name -notlike "*d.dll" } | Select-Object -First 1
        # if ($ReleaseDll) {
        #     Write-Output "Found and copying Release DLL: $($ReleaseDll.Name)"
        #     Copy-Item -Path $ReleaseDll.FullName -Destination $PKG_DIR
        # } else {
        #     # 如果找不到，构建应该失败，因为这是必需的依赖。
        #     Write-Error "FATAL: Could not find the release OpenCV world DLL."
        #     exit 1
        # }
        # ======================================================================
        # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        # ======================================================================

        Write-Output "Copying Microsoft VC++ Runtime DLLs..."
        Copy-Item -Path "$env:VCToolsRedistDir\x64\Microsoft.VC143.CRT\*.dll" -Destination $PKG_DIR

        $ARTIFACT_NAME = "polarimeter-windows-v${{ github.run_number }}.zip"
        Compress-Archive -Path "$PKG_DIR\*" -DestinationPath $ARTIFACT_NAME
        
        echo "artifact_name=$ARTIFACT_NAME" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Upload Artifact (zip)
      uses: actions/upload-artifact@v4
      with:
        name: polarimeter-windows-package
        path: ${{ steps.create_package.outputs.artifact_name }}