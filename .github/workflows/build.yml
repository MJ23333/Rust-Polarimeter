name: Build Windows Executable

on:
  push:
    branches: [ "main" ] # 当主分支有更新时触发
  workflow_dispatch: # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest # 使用最新的 Windows 环境
    strategy:
      matrix:
        rust: [stable]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # 检出你的代码

    


    - name: Install OpenCV and LLVM
      run: choco install opencv --version=4.11.0 -y; choco install llvm -y

    - name: Discover and Set OpenCV Environment Variables
      id: set_opencv_vars
      run: |
          echo "OPENCV_INCLUDE_PATHS=C:\tools\opencv\build\include" >> $env:GITHUB_ENV

          $IncludePath = "C:\tools\opencv\build\include"
          echo "OPENCV_INCLUDE_PATHS=$IncludePath" >> $env:GITHUB_ENV
          Write-Output "OPENCV_INCLUDE_PATHS=$IncludePath"

          # Discover the lib path (robustly finds the vc* folder)
          $LibDir = (Get-ChildItem "C:\tools\opencv\build\x64" -Directory | Where-Object { $_.Name -like 'vc*' } | Select-Object -First 1)
          if (-not $LibDir) {
            Write-Error "Could not find the VC++ version-specific lib directory in $env:OpenCV_DIR\x64"
            exit 1
          }
          $LibPath = "$($LibDir.FullName)\lib"
          echo "OPENCV_LINK_PATHS=$LibPath" >> $env:GITHUB_ENV
          Write-Output "OPENCV_LINK_PATHS=$LibPath"
          
          # Discover all library names in that path
          $LibNames = (Get-ChildItem $LibPath -Filter *.lib).Name -replace '\.lib$' -join ','
          if (-not $LibNames) {
            Write-Error "Could not find any .lib files in $LibPath"
            exit 1
          }
          echo "OPENCV_LINK_LIBS=$LibNames" >> $env:GITHUB_ENV
          Write-Output "OPENCV_LINK_LIBS=$LibNames"
         
      shell: pwsh
     # echo "OPENCV_INCLUDE_PATHS=C:\tools\opencv\build\include" >> $env:GITHUB_ENV

          # # Discover the lib path (robustly finds the vc* folder)
          # echo "OPENCV_LINK_PATHS=C:\tools\opencv\build\x64\vc17\lib" >> $env:GITHUB_ENV
          
          # echo "OPENCV_LINK_LIBS=opencv_world4110" >> $env:GITHUB_ENV
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    # 新增步骤: 安装 cargo-bundle
    # - name: Install cargo-bundle
    #   run: cargo install cargo-bundle

    # 修改步骤: 使用 cargo bundle 而不是 cargo build
    - name: Bundle the release executable
      run: cargo build --release

    # 修改步骤: 上传打包好的产物
    - name: Upload Artifact (zip)
      uses: actions/upload-artifact@v4
      with:
        name: windows-bundle-zip
        # cargo bundle 会把所有东西放在 target/release/bundle/os-arch/你的程序名/ 目录下
        # 我们把它压缩并上传
        path: |
          target/release/bundle/windows-msvc/ # 这个路径可能会变化
          !target/release/bundle/**/*.pdb # 排除调试文件