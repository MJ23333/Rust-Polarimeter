name: Build macOS Application

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest # 使用最新的 macOS 环境

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust Toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install Dependencies (Homebrew & Cargo)
      run: |
        # GitHub Actions 的 macOS runner 自带 Homebrew
        echo "Installing OpenCV..."
        brew install opencv
        
        echo "Installing cargo-bundle..."
        cargo install cargo-bundle

    - name: Make Packaging Script Executable
      run: chmod +x package_macos.sh # 给予我们的打包脚本执行权限

    - name: Run Packaging Script
      # 这里直接执行我们之前编写好的脚本，完成所有核心打包工作
      run: ./package_macos.sh

    - name: Archive the Application
      id: archive_app
      run: |
        # 从打包脚本中获取 APP_NAME，或者在这里硬编码
        # 为了稳妥，我们直接在这里定义，请确保它和你的脚本里的一致
        APP_NAME="Polarimeter"
        
        # .app 文件本质上是一个文件夹，上传前必须将其压缩成 .zip
        # 我们同样加上版本号，方便追踪
        ARTIFACT_NAME="${APP_NAME}-macos-v${{ github.run_number }}.zip"
        
        echo "Archiving $APP_NAME.app to $ARTIFACT_NAME..."
        cd target/release/bundle/osx/
        zip -r "../../${ARTIFACT_NAME}" "${APP_NAME}.app"
        cd ../../../.. # 返回项目根目录

        # 将最终的压缩包名设置为一个输出变量
        echo "artifact_name=$ARTIFACT_NAME" >> $env:GITHUB_OUTPUT
      shell: pwsh # 在 macOS runner 上也可以使用 PowerShell 来统一脚本语言

    - name: Upload Artifact (zip)
      uses: actions/upload-artifact@v4
      with:
        name: polarimeter-macos-package
        # 使用上一步生成的压缩包的完整路径
        path: target/${{ steps.archive_app.outputs.artifact_name }}